package main

import "dependecies"
import "gl"
import "glfw"
import "gltext"
import "os"

//var number to define how many field are on the map (number x number)
var NUMBER i32 = 20

//to print out the printScore method only once
var won bool
var lost bool

//global texture
var activeDefaultTex i32
var passiveDefaultTex i32
var oneTex i32
var twoTex i32
var threeTex i32
var fourTex i32
var fiveTex i32
var sixTex i32
var sevenTex i32
var eightTex i32
var mineTex i32
var flagTex i32

//Boolean to determine if the user wants to restart the game
var restart bool = false

//Keyboard Keys
var RIGHT_ARROW_KEY i32 = 262
var LEFT_ARROW_KEY i32 = 263
var DOWN_ARROW_KEY i32 = 264
var UP_ARROW_KEY i32 = 265
var ENTER_KEY i32 = 257

// Directions
var UP i32 = 0
var LEFT i32 = 1
var DOWN i32 = 2
var RIGHT i32 = 3

//HeaderSize
var MENU_WIDTH i32 = 720
var MENU_HEIGHT i32 = 100

//WindowSize
var GAME_WIDTH i32 = 720
var GAME_HEIGHT i32 = 720

//Window Size
var WINDOW_WIDTH i32 = 720
var WINDOW_HEIGHT i32 = 820

//Width and Height of a Cell
var CELLS_WIDTH_PX f32 = 0.0
var CELLS_HEIGHT_PX f32 = 0.0

//amount of mines on the map
var MINES i32

//amount of flags on the map
var flags i32

var gamefield [24][24]dependecies.Cell

var gamefieldSize i32

var mousePosition dependecies.Position2D

func initGlfw(window str) () {

    glfw.Init()
    glfw.WindowHint(glfw.Resizable,glfw.False)
    glfw.WindowHint(glfw.ContextVersionMajor, 2)
    glfw.WindowHint(glfw.ContextVersionMinor, 1)

    glfw.CreateWindow(window,WINDOW_WIDTH,WINDOW_HEIGHT,"Minesweeper")
    glfw.MakeContextCurrent(window)
}

func initGl() (program i32) {
	gl.Init()
    program = gl.CreateProgram()
    gl.LinkProgram(program)
	return program
}

/* Function     : initTextures
   Input        : 
   Output       : 
   Desctription : initializes the global texture variables
*/
func initTextures() (){
	var wd str
	wd = str.concat(os.GetWorkingDirectory(),"textures/")
	
	activeDefaultTex = gl.NewTexture(sprintf("%sactiveDefault.png",wd))
	passiveDefaultTex = gl.NewTexture(sprintf("%spassiveDefault.png",wd))
	oneTex = gl.NewTexture(sprintf("%s1.png",wd))
	twoTex = gl.NewTexture(sprintf("%s2.png",wd))
	threeTex = gl.NewTexture(sprintf("%s3.png",wd))
	fourTex = gl.NewTexture(sprintf("%s4.png",wd))
	fiveTex = gl.NewTexture(sprintf("%s5.png",wd))
	sixTex = gl.NewTexture(sprintf("%s6.png",wd))
	sevenTex = gl.NewTexture(sprintf("%s7.png",wd))
	eightTex = gl.NewTexture(sprintf("%s8.png",wd))
	mineTex = gl.NewTexture(sprintf("%smine.png",wd))
	flagTex = gl.NewTexture(sprintf("%sflag.png",wd))
}

func setupCellSpecs() (){
    CELLS_WIDTH_PX = f32.div(i32.f32(GAME_WIDTH),i32.f32(gamefieldSize))
    CELLS_HEIGHT_PX = f32.div(i32.f32(GAME_HEIGHT),i32.f32(gamefieldSize))
}

/* Function     : initScene
   Desctription : Initializes the gamefield,Player and Food
*/
func initScene() (){
    gl.Clear(i32.bitor(gl.COLOR_BUFFER_BIT, gl.DEPTH_BUFFER_BIT))
	gl.Disable(gl.DEPTH_TEST)
	gl.MatrixMode(gl.PROJECTION)
	gl.LoadIdentity()
	gl.MatrixMode(gl.MODELVIEW)

	initGamefield()
	initMines()
	initNumbers()
}

/* Function     : initGamefield
   Input        : 
   Output       : 
   Desctription : initializes the global gamefield variable
*/
func initGamefield()(){
    var i i32
    var j i32

    for i = 0; i < gamefieldSize; i++{

		for j=0; j < gamefieldSize; j++{

			gamefield[i][j] = initCell(i,j,passiveDefaultTex)
		}
    }
}

/* Function     : initCell
   Input        : line(i32)   = y-Index on the Gamefield
				: column(i32) = x-Index on the Gamefield
				: tex(i32)	  = texture
   Output       : cell(Cell)  = return newCell
   Desctription : initializes a cell
*/
func initCell(line i32, column i32, tex i32) (cell dependecies.Cell) {
    var pos dependecies.Position2D
    pos = indexToPosition(line,column)

    var dimension dependecies.Dimension2D
    dimension = dependecies.newDimension2D(CELLS_HEIGHT_PX,CELLS_WIDTH_PX)

    cell = dependecies.newCell(pos,dimension,tex)

    return cell
}

/* Function     : indexToPosition
   Input        : line(i32)   = y-Index on the Gamefield
				: column(i32) = x-Index on the Gamefield
   Output       : pos(Position2D)  = return newPosition
   Desctription : Calculates the screen position according to the line and column -> between -1 and 1
*/
func indexToPosition (line i32, column i32) (pos dependecies.Position2D){
    var x f32 = f32.mul(i32.f32(column),CELLS_WIDTH_PX)
    var y f32 = f32.add(f32.mul(i32.f32(line),CELLS_HEIGHT_PX),i32.f32(MENU_HEIGHT))
	//printf("%d - %d at x: %f y: %f\n",column,line,x,y)
    pos = dependecies.newPosition2D(x,y)

    return pos
}

/* Function     : drawBoard
   Input        : 
   Output       : 
   Desctription : prints the gamefield to the Screen
*/
func drawBoard()(){
    var i i32
    var j i32

    for i = 0; i < gamefieldSize; i++{

		for j=0; j < gamefieldSize; j++{

			drawCell(gamefield[i][j].position, gamefield[i][j].dimension, gamefield[i][j].currTexture)
		}
    }
}

/* Function     : drawActiveBoard
   Input        : 
   Output       : 
   Desctription : prints the activeTexture of the gamefield the Screen
*/
func drawActiveBoard()(){
    var i i32
    var j i32

    for i = 0; i < gamefieldSize; i++{

		for j=0; j < gamefieldSize; j++{

			drawCell(gamefield[i][j].position, gamefield[i][j].dimension, gamefield[i][j].activeTexture)
		}
    }
}

/*	Function     : drawCell
	Input        : 
   	Output       : 
   	Desctription : prints the Cell to the Screen
*/
func drawCell(pos dependecies.Position2D, dim dependecies.Dimension2D, tex i32) (){
	gl.MatrixMode(gl.PROJECTION)
	gl.LoadIdentity()
	gl.Ortho(0.0D,i32.f64(WINDOW_WIDTH),i32.f64(WINDOW_HEIGHT),0.0D,-1.0D,1.0D)

	gl.MatrixMode(gl.MODELVIEW)
	gl.LoadIdentity()
	gl.BindTexture(gl.TEXTURE_2D, tex)
	gl.Begin(gl.QUADS)

	gl.TexCoord2d(0.0D, 0.0D);
	gl.Vertex2f(pos.x,pos.y);

	gl.TexCoord2d(0.0D, 1.0D);
	gl.Vertex2f(pos.x,pos.y  + CELLS_HEIGHT_PX);

	gl.TexCoord2d(1.0D, 1.0D);
	gl.Vertex2f(pos.x + CELLS_WIDTH_PX ,pos.y + CELLS_HEIGHT_PX);

	gl.TexCoord2d(1.0D, 0.0D);
	gl.Vertex2f(pos.x + CELLS_WIDTH_PX ,pos.y);

	gl.End();
	
	//gl.Flush
}

func scale(numerator f32, denominator i32) (result f32) {
	result = f32.div(numerator, i32.f32(denominator))
	return result
}

func initMines()() {
	if i32.eq(gamefieldSize,8){
		MINES = 10
	}
	if i32.eq(gamefieldSize,16){
		MINES = 40
	}
	if i32.eq(gamefieldSize,24){
		MINES = 99
	}
	var mines i32 = MINES
    var i i32
    var j i32
	var number i32
	for i32.gt(mines,0){
		for i = 0; i < gamefieldSize; i++{
			for j=0; j < gamefieldSize; j++{
				if bool.eq(i32.eq(gamefield[i][j].activeTexture,mineTex),false){
					number = i32.rand(1,gamefieldSize*gamefieldSize)
					if (number <= 6) {
						gamefield[i][j].activeTexture = mineTex;
						mines--;
						if i32.eq(mines,0) {
							return
						}
					}
				}
			}
		}
    }
}

func initNumbers()(){
	var i i32
    	var j i32
	var number i32 = 0
	for i = 0; i < gamefieldSize; i++{
		for j=0; j < gamefieldSize; j++{
			number = checkNeighbours(i,j)
			//printf("current number: %d   @ line: %d   column: %d\n",number,i,j)
			setNumber(i,j,number)
		}
	}
}

func checkNeighbours(y i32, x i32)(counter i32){
	
	if i32.eq(gamefield[y][x].activeTexture,mineTex){
		counter = i32.sub(0,1)
		return
	}
	
	var yTemp i32 = y
	var xTemp i32 = x
	counter = 0
	
	//check top middle,left,right
	yTemp = i32.sub(y,1)
	if i32.gt(yTemp,-1){
		//check top middle
		if i32.eq(gamefield[yTemp][xTemp].activeTexture,mineTex){
			counter = i32.add(counter,1)
		}
		
		//check top left
		xTemp = i32.sub(x,1)
		if i32.gt(xTemp,-1){
			if i32.eq(gamefield[yTemp][xTemp].activeTexture,mineTex){
				counter = i32.add(counter,1)
			}
		}
		
		//check top right
		xTemp = i32.add(x,1)
		if i32.lt(xTemp,gamefieldSize){
			if i32.eq(gamefield[yTemp][xTemp].activeTexture,mineTex){
				counter = i32.add(counter,1)
			}
		}
	}
	
	
	//check left,right neighbours
	yTemp = y
	xTemp = i32.sub(x,1)
	if i32.gt(xTemp,-1){
		if i32.eq(gamefield[yTemp][xTemp].activeTexture,mineTex){
			counter = i32.add(counter,1)
		}
	}
	xTemp = i32.add(x,1)
	if i32.lt(xTemp,gamefieldSize){
		if i32.eq(gamefield[yTemp][xTemp].activeTexture,mineTex){
			counter = i32.add(counter,1)
		}
	}
	
	
	//check bottom middle,left,right neighbours
	xTemp = x
	yTemp = i32.add(y,1)
	if i32.lt(yTemp,gamefieldSize){
		if i32.eq(gamefield[yTemp][xTemp].activeTexture,mineTex){
			counter = i32.add(counter,1)
		}
		
		xTemp = i32.sub(x,1)
		if i32.gt(xTemp,-1){
			if i32.eq(gamefield[yTemp][xTemp].activeTexture,mineTex){
				counter = i32.add(counter,1)
			}
		}
		
		xTemp = i32.add(x,1)
		if i32.lt(xTemp,gamefieldSize){
			if i32.eq(gamefield[yTemp][xTemp].activeTexture,mineTex){
				counter = i32.add(counter,1)
			}
		}
	
	}
	
	return counter
}

func setNumber(y i32, x i32, number i32)() {
	
	if i32.eq(number,0){
		gamefield[y][x].activeTexture = activeDefaultTex
	}
	
	if (number == 1){
		gamefield[y][x].activeTexture = oneTex
		gamefield[y][x].number = true
	}
	
	if (number == 2){
		gamefield[y][x].activeTexture = twoTex
		gamefield[y][x].number = true
	}
	
	if (number == 3){
		gamefield[y][x].activeTexture = threeTex
		gamefield[y][x].number = true
	}
	
	if (number == 4){
		gamefield[y][x].activeTexture = fourTex
		gamefield[y][x].number = true
	}
	
	if (number == 5){
		gamefield[y][x].activeTexture = fiveTex
		gamefield[y][x].number = true
	}
	
	if (number == 6){
		gamefield[y][x].activeTexture = sixTex
		gamefield[y][x].number = true
	}
	
	if (number == 7){
		gamefield[y][x].activeTexture = sevenTex
		gamefield[y][x].number = true
	}
	
	if (number == 8){
		gamefield[y][x].activeTexture = eightTex
		gamefield[y][x].number = true
	}
	
}
/* 	Function     : renderScreen
	Input		 : 
	Output		 : 
   	Desctription : Calls the draw functions of the Board,Player,Food
*/
func renderScreen()(){
    drawBoard()
}

func clickMouseEvents(window str, key i32, action i32, mods i32)(){
	if bool.and(lost==false,won==false){
		if f32.gteq(mousePosition.y,i32.f32(MENU_HEIGHT)){
			if i32.eq(key, glfw.MouseButtonLeft) {
				if action == glfw.Press {
					//printf("left clicked")
					prepareRevelation()
				}
			}
			if i32.eq(key, glfw.MouseButtonRight) {
				if action == glfw.Press {
					//printf("right clicked")
					setFlag()
				}
			}
		}
	}
}

func setFlag()(){
	var pos dependecies.Position2D
	pos = calculateMouseToCell()
	var y i32 = f32.i32(pos.y)
	var x i32 = f32.i32(pos.x)
	if bool.eq(gamefield[y][x].open,false){
		if i32.eq(gamefield[y][x].currTexture,flagTex){
			gamefield[y][x].currTexture = gamefield[y][x].passiveTexture
			flags = flags - 1
		} else {
			gamefield[y][x].currTexture = flagTex
			flags = flags + 1
		}
	}
}

func prepareRevelation()(){
	var pos dependecies.Position2D
	pos = calculateMouseToCell()
	var y i32 = f32.i32(pos.y)
	var x i32 = f32.i32(pos.x)
	if i32.eq(mineTex,gamefield[y][x].activeTexture){
		lost = true
		revealAllBombs()
	} else {
		revealFields(y,x)
		checkIfWon()
	}
}

func revealFields(y i32, x i32)(){
	if bool.eq(gamefield[y][x].open,false){
		revealField(y,x)
		if (gamefield[y][x].number){
			return
		}
		
		var yTemp i32 = y
		var xTemp i32 = x
		//check top middle,left,right
		yTemp = i32.sub(y,1)
		if i32.gt(yTemp,-1){
			//check top middle
			revealFields(yTemp,xTemp)
			
			//check top left
			xTemp = i32.sub(x,1)
			if i32.gt(xTemp,-1){
				revealFields(yTemp,xTemp)
			}
			
			//check top right
			xTemp = i32.add(x,1)
			if i32.lt(xTemp,gamefieldSize){
				revealFields(yTemp,xTemp)
			}
		}
		
		
		//check left,right neighbours
		yTemp = y
		xTemp = i32.sub(x,1)
		if i32.gt(xTemp,-1){
			revealFields(yTemp,xTemp)
		}
		xTemp = i32.add(x,1)
		if i32.lt(xTemp,gamefieldSize){
			revealFields(yTemp,xTemp)
		}
		
		
		//check bottom middle,left,right neighbours
		xTemp = x
		yTemp = i32.add(y,1)
		if i32.lt(yTemp,gamefieldSize){
			revealFields(yTemp,xTemp)
			
			xTemp = i32.sub(x,1)
			if i32.gt(xTemp,-1){
				revealFields(yTemp,xTemp)
			}
			
			xTemp = i32.add(x,1)
			if i32.lt(xTemp,gamefieldSize){
				revealFields(yTemp,xTemp)
			}
		
		}
	
	}	
}

func revealField(y i32, x i32)(){
	//printf("opened field at y: %d   x: %d\n",y,x)
	gamefield[y][x].open = true	
	gamefield[y][x].currTexture = gamefield[y][x].activeTexture
}

func revealAllBombs()(){
    var i i32
    var j i32

    for i = 0; i < gamefieldSize; i++{

		for j=0; j < gamefieldSize; j++{

			if i32.eq(gamefield[i][j].activeTexture,mineTex){
				revealField(i,j)
			}
		}
    }
}

func checkIfWon()(){
	var fields i32 = gamefieldSize * gamefieldSize - MINES
	
	var i i32
	var j i32
	var amount i32 = 0

	for i = 0; i < gamefieldSize; i++{
		for j = 0; j < gamefieldSize; j++{
			if bool.eq(gamefield[i][j].open,true){
				amount = amount + 1
			}
		}
	}

	if i32.eq(amount,fields){
		won = true
	}
}

func calculateMouseToCell()(position dependecies.Position2D){
	var yPos i32 = i32.div(f32.i32(mousePosition.y) - MENU_HEIGHT, f32.i32(CELLS_HEIGHT_PX))
	var xPos i32 = i32.div(f32.i32(mousePosition.x), f32.i32(CELLS_WIDTH_PX))
	position = dependecies.newPosition2D(i32.f32(xPos),i32.f32(yPos))
	return position
}

func updateMousePosition(window str, xpos f64, ypos f64)(){
	mousePosition.x = f64.f32(xpos)
	mousePosition.y = f64.f32(ypos)
}

func setupText()(){
	var wd str
	wd = os.GetWorkingDirectory()
	fontFile := str.concat(wd, "fonts/roboto-light.ttf")

	os.Open(fontFile)
	gltext.LoadTrueType("Roboto100", fontFile, 100, 32, 127, gltext.LeftToRight)
	os.Close(fontFile)
	
	os.Open(fontFile)
	gltext.LoadTrueType("Roboto50", fontFile, 50, 32, 127, gltext.LeftToRight)
	os.Close(fontFile)

	os.Open(fontFile)
	gltext.LoadTrueType("Roboto30", fontFile, 30, 32, 127, gltext.LeftToRight)
	os.Close(fontFile)

}

func printMenu()(){
	var menuText str
	menuText = str.concat("Mines:",i32.str(i32.sub(MINES,flags))) 
	gltext.Printf("Roboto50",275.0, 30.0, menuText)
}

func printLost()(){
	var lostText str 
	lostText = "You lost"
	gltext.Printf("Roboto50",275.0, 30.0, lostText)
}

func printWon()(){
	var wonText str 
	wonText = "You won"
	gltext.Printf("Roboto50",275.0, 30.0, wonText)
}


/* 	Function     : keyControl
	Input		 : ?!?
	Output		 : 
   	Desctription : Restarts the game
*/
func keyControl(window str, key i32, scancode i32, action i32, mods i32)(){
	if bool.and(i32.eq(key, ENTER_KEY), i32.eq(action, 1)){
		restart = true
	}
}


func main() {
	
	// easy = 8 | medium = 16 | expert = 24
	gamefieldSize = 16
    initGlfw("window")
    var program i32 = initGl()
	
	new_game:
    setupCellSpecs()
	won = false
	flags = 0
	restart = false
	setupText()
	initTextures()
    initScene()

    glfw.SetKeyCallback("window","keyControl")
    glfw.SetMouseButtonCallback("window", "clickMouseEvents")
    glfw.SetCursorPosCallback("window","updateMousePosition")
    
	lost = false
    for bool.not(glfw.ShouldClose("window")){
		
		gl.Clear(i32.bitor(gl.COLOR_BUFFER_BIT, gl.DEPTH_BUFFER_BIT))
		gl.UseProgram(program)
		
		drawBoard()
		if lost == true{
			printLost()
		} else {
			if won == true{
				printWon()
			} else {
				printMenu()
			}
		}

		if restart == true{
			goto new_game
		}		

        glfw.PollEvents()
        glfw.SwapBuffers("window")
    }
}
